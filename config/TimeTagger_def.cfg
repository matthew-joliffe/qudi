global:
    # list of modules to load when starting
    startup: ['man', 'tray']

    module_server:
        address: 'localhost'
        port: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'


hardware:
    microwave_1:
        module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
        gpib_address: 'GPIB0::25::INSTR'
        gpib_timeout: 20
    
    microwave_2:
        module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
        gpib_address: 'GPIB0::28::INSTR'
        gpib_timeout: 20

    mycounter:
        module.Class: 'timetagger_counter.TimeTaggerCounter'
        timetagger_channel_apd_0: 1
        timetagger_channel_apd_1: 2
        timetagger_sum_channels: False
    
    fastcounter_timetagger:
        module.Class: 'swabian_instruments.timetagger_fast_counter.TimeTaggerFastCounter'
        timetagger_channel_apd_0: 1
        timetagger_channel_apd_1: 2
        timetagger_channel_detect: 4
        timetagger_channel_sequence: 5
        timetagger_sum_channels: True
    
    pulsestreamer:
        module.Class: 'swabian_instruments.pulse_streamer.PulseStreamer'
        pulsestreamer_ip: '129.69.46.171'
        #pulsestreamer_ip: '169.254.8.2'
        #pulsed_file_dir: 'C:\\Software\\pulsed_files'
        laser_channel: 0
        uw_x_channel: 2
        use_external_clock: False
        external_clock_option: 0

    nicard_6229:
        module.Class: 'national_instruments_x_series_tt.NationalInstrumentsXSeries'
        default_scanner_clock_frequency: 100 # optional, in Hz
        clock_channel: '/Dev1/Ctr0' 
        counter_channels: '' 
        scanner_clock_channel: '/Dev1/Ctr0' # internally connected to pixel_clock_channel
        pixel_clock_channel: '/Dev1/PFI0' # Connect to timetagger_pixel_start_ch, timetagger_pixel_stop_ch
        scanner_ao_channels:
            - '/Dev1/AO0'
            - '/Dev1/AO1'
            - '/Dev1/AO2'
        scanner_counter_channels: # won't be used | only for name sake
            - ''
            - ''
        scanner_voltage_ranges:
            - [0, 10] #do not change! 
            - [0, 10] #do not change!
            - [0, 10] #do not change!
        scanner_position_ranges:
            - [0e-6, 100e-6]
            - [0e-6, 100e-6]
            - [0e-6, 20e-6]
        timetagger_channel_apd_0: 1
        timetagger_channel_apd_1: 2
        timetagger_pixel_start_ch: 3
        timetagger_pixel_stop_ch: -3
        timetagger_sum_channels: True

        odmr_trigger_channel: '/Dev1/PFI12' 
        gate_in_channel: '/Dev1/Ctr1' # won't be used

    # myspectrometer:
    #     module.Class: 'spectrometer.spectrometer_dummy.SpectrometerInterfaceDummy'
    #     connect:
    #         fitlogic: 'fitlogic'

    # myspectrometer:
    #     module.Class: 'spectrometer.oceanoptics_spectrometer.OceanOptics'
    #     spectrometer_serial: 'QEP02178' #insert here the right serial number.
    #     integration_time: 30000000
logic:
    odmrlogic:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'nicard_6229'
            fitlogic: 'fitlogic'
            microwave1: 'microwave_1'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
            # pulsegenerator: 'pulsestreamer'

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mycounter'
            savelogic: 'savelogic'
    
    # scannerlogic:
    #     module.Class: 'confocal_logic.ConfocalLogic'
    #     connect:
    #         confocalscanner1: 'nicard_6229'
    #         savelogic: 'savelogic'
    
    # optimizerlogic:
    #     module.Class: 'optimizer_logic.OptimizerLogic'
    #     connect:
    #         confocalscanner1: 'nicard_6229'
    #         fitlogic: 'fitlogic'

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            savelogic: 'savelogic'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'nicard_6229'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            fitlogic: 'fitlogic'
    
    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: 'Data/'
        log_into_daily_directory: True
        save_pdf: True
        save_png: True
    
    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
            scannerLocationRefocus:
                module: 'refocus'
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'

    pulsedmasterlogic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    sequencegeneratorlogic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #assets_storage_path: 'C:/Users/<username>/saved_pulsed_assets'
        #additional_predefined_methods_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #additional_sampling_functions_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #overhead_bytes: 4294967296  # Not properly implemented yet
        connect:
            pulsegenerator: 'pulsestreamer'

    pulsedmeasurementlogic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        raw_data_save_type: 'text'  # optional
        #additional_extraction_path: 'C:\\Custom_dir\\Methods'  # optional
        #additional_analysis_path: 'C:\\Custom_dir\\Methods'  # optional
        connect:
            fastcounter: 'fastcounter_timetagger'
            pulsegenerator: 'pulsestreamer'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            microwave: 'microwave_1'
    
    # spectrumlogic:
    #     module.Class: 'spectrum.SpectrumLogic'
    #     connect:
    #         spectrometer: 'myspectrometer'
    #         savelogic: 'savelogic'
    #         # odmrlogic: 'odmrlogic' # optional
    #         fitlogic: 'fitlogic'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic'
            optimiserlogic: 'optimizerlogic'
            savelogic: 'savelogic'

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    counter:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'
    confocal:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02
        default_meter_prefix: 'u'
    
    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic'
            savelogic: 'savelogic'
        
    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic'

    # spectrometer:
    #     module.Class: 'spectrometer.spectrometergui.SpectrometerGui'
    #     connect:
    #         spectrumlogic: 'spectrumlogic'

    poimanager:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic: 'poimanagerlogic'
            scannerlogic: 'scannerlogic'